name: Deploy
on:
    push:        
      paths-ignore:
        - "README.md"
        - "**/docs/**"
        - ".github/workflows/docs.yml"

    pull_request:
      branches:
        - master
        
    schedule:
        - cron: "0 11 * * *"

jobs:

    publish-pypi:
        name: Publish to PyPi
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
        runs-on: ubuntu-latest
        permissions:
          # IMPORTANT: this permission is mandatory for trusted publishing
          id-token: write
        steps:
            - name: Checkout source
              uses: actions/checkout@v4
            - name: Set up Python 3.9
              uses: actions/setup-python@v5
              with:
                  python-version: 3.9
            - name: Build package
              run: |
                  pip install wheel setuptools -U
                  python setup.py sdist
            - name: Publish
              uses: pypa/gh-action-pypi-publish@release/v1
              with:
                  skip-existing: true

    test-publish-pypi:
        name: Build & verify PyPi
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-python@v5
              with:
                  python-version: 3.9

            - name: Install twine
              run: |
                  python -m pip install twine
            - name: Build package
              run: |
                pip install wheel setuptools -U
                python setup.py sdist

            - name: List result
              run: |
                  ls -lh dist
            - name: Check long_description
              run: |
                  python -m twine check dist/*

    build-conda:
        name: Build in Conda
        if: startsWith(github.event.ref, 'refs/tags') == false
        runs-on: ${{ matrix.os }}
        defaults:
          run:
            shell: bash -l {0}
        strategy:
            fail-fast: false
            matrix:
                os: ["ubuntu-latest", "macos-latest", "macos-13"]
                python-version: [3.9, 3.11]
                include:
                  - environment: ci/environment.yml
                  - environment: ci/environment_noxspec.yml
                    os: macos-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - name: Add conda ${{ matrix.python-version }} to system path
              uses: conda-incubator/setup-miniconda@v3
              with:
                  activate-environment: "test_env"
                  auto-activate-base: false
                  miniforge-variant: Miniforge3
                  python-version: ${{ matrix.python-version }}
                  auto-update-conda: true
                  environment-file: ${{ matrix.environment }}
                  use-only-tar-bz2: false
                  channel-priority: true
                  channels: conda-forge, xspecmodels, threeml

            - name: Init Env
              shell: bash -l {0}
              run: |

                  # Make sure we fail in case of error
                  if [[ ${{matrix.os}} == ubuntu-latest ]];
                  then
                      
                      miniconda_os=Linux
                      compilers="gcc_linux-64 gxx_linux-64 gfortran_linux-64"
                  else
                      
                      miniconda_os=MacOSX
                      compilers="clang_osx-64 clangxx_osx-64 gfortran_osx-64"

                      # On macOS we also need the conda libx11 libraries used to build xspec
                      # We also need to pin down ncurses, for now only on macos.
                      xorg="xorg-libx11"
                  fi

                  export PKG_VERSION=$(python -c "import versioneer;print(versioneer.get_version())")
                  echo "PKG_VERSION=$PKG_VERSION" >> $GITHUB_ENV

                  echo "HOME= ${HOME}"
                  echo "Conda installation path ${CONDA}"
                  echo "Building ${PKG_VERSION}"
                  
                  #echo "Python version: ${{matrix.python-version}}"

                  conda install codecov pytest-cov
            - name: Conda list
              shell: bash -l {0}
              run: |
                  conda list
            - name: Build the Distribution
              shell: bash -l {0}
              run: |
                  # Build package

                  #conda install conda-build -n base
                  mamba install -c conda-forge boa

                  conda config --set conda_build.pkg_format 2
                  conda config --set conda_build.zstd_compression_level 19

                  #conda build --python=${{matrix.python-version}} conda-dist/recipe
                  conda mambabuild --python=${{matrix.python-version}} conda-dist/recipe

                  ls -l ${CONDA}/envs/test_env/conda-bld/*/*

                  conda search -c ${CONDA}/envs/test_env/conda-bld/ astromodels --offline --use-local --info
            - name: Install it
              shell: bash -l {0}
              run: |
                  #conda install --use-local astromodels
                  conda install -c ${CONDA}/envs/test_env/conda-bld/ --strict-channel-priority --use-local astromodels
            - name: Test import xspec
              if: matrix.os != 'macos-latest'
              shell: bash -l {0}
              run: |
                  cd astromodels/tests
                  python -c "import astromodels.xspec"
            - name: Test astromodels
              shell: bash -l {0}
              run: python -m pytest -vv --cov=astromodels --cov-report=xml
              env:
                  OMP_NUM_THREADS: 1
                  MKL_NUM_THREADS: 1
                  NUMEXPR_NUM_THREADS: 1
                  MPLBACKEND: "Agg"

    publish-conda:
        name: Publish to Conda
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: ["ubuntu-latest", "macos-latest", "macos-13"]
                python-version: [3.9, 3.11]
                include:
                  - environment: ci/environment.yml
                  - environment: ci/environment_noxspec.yml
                    os: macos-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - name: Add conda ${{ matrix.python-version }} to system path
              uses: conda-incubator/setup-miniconda@v3
              with:
                  activate-environment: "test_env"
                  auto-activate-base: false
                  #architecture: "x64"
                  miniforge-variant: Miniforge3
                  #miniforge-version: latest
                  python-version: ${{ matrix.python-version }}
                  auto-update-conda: true
                  environment-file: ${{ matrix.environment }}
                  use-only-tar-bz2: false
                  channel-priority: true
                  channels: conda-forge, xspecmodels, threeml

            - name: Init Env
              shell: bash -l {0}
              run: |

                  # Make sure we fail in case of error
                  if [[ ${{matrix.os}} == ubuntu-latest ]];
                  then
                  miniconda_os=Linux
                  compilers="gcc_linux-64 gxx_linux-64 gfortran_linux-64"
                  else  # osx
                  miniconda_os=MacOSX
                  compilers="clang_osx-64 clangxx_osx-64 gfortran_osx-64"

                  # On macOS we also need the conda libx11 libraries used to build xspec
                  # We also need to pin down ncurses, for now only on macos.
                  xorg="xorg-libx11"
                  fi

                  export PKG_VERSION=$(python -c "import versioneer;print(versioneer.get_version())")
                  echo "PKG_VERSION=$PKG_VERSION" >> $GITHUB_ENV

                  echo "HOME= ${HOME}"
                  echo "Conda installation path ${CONDA}"
                  echo "Building ${PKG_VERSION}"
            - name: Build the Distribution
              shell: bash -l {0}
              run: |
                  # Build package

                  #conda install conda-build -n base
                  mamba install -c conda-forge boa

                  conda config --set conda_build.pkg_format 2
                  conda config --set conda_build.zstd_compression_level 19

                  #conda build --python=${{matrix.python-version}} conda-dist/recipe
                  conda mambabuild --python=${{matrix.python-version}} conda-dist/recipe

                  conda search -c ${CONDA}/envs/test_env/conda-bld/ astromodels --offline --use-local --info
            - name: Install it
              shell: bash -l {0}
              run: |
                  #conda install --use-local astromodels
                  conda install -c ${CONDA}/envs/test_env/conda-bld/ --strict-channel-priority --use-local astromodels
            - name: Publish to Conda
              shell: bash -l {0}
              run: |

                  conda install -c conda-forge anaconda-client
                  echo "Uploading ${{matrix.os}} IsDev: ${ISDEV} "

                  if [[ "${ISDEV}" == "true" ]]; then

                  LABEL="--label dev"

                  fi
                  if [[ ${{matrix.os}} == ubuntu-latest ]];
                  then

                  anaconda -v --show-traceback -t $UPLOAD_TOKEN upload -u threeml ${CONDA}/envs/test_env/conda-bld/linux-64/*.conda --force $LABEL

                  elif [[ ${{matrix.os}} == macos-latest ]];
                  then

                  anaconda -v --show-traceback -t $UPLOAD_TOKEN upload -u threeml ${CONDA}/envs/test_env/conda-bld/osx-arm64/*.conda --force $LABEL

                  else

                  anaconda -v --show-traceback -t $UPLOAD_TOKEN upload -u threeml ${CONDA}/envs/test_env/conda-bld/osx-64/*.conda --force $LABEL

                  fi

              env:
                  UPLOAD_TOKEN: ${{secrets.CONDA_UPLOAD_TOKEN}}
                  CURRENT_OS: ${{matrix.os}}
                  ISDEV: ${{contains(github.ref, 'dev')}}
